apiVersion: v1
kind: DeploymentConfig
metadata:
  name: "{{ .Values.name }}"
  labels:
    app: "{{ .Values.name }}"
spec:
  replicas: 1
  selector:
    name: "{{ .Values.name }}"
  strategy:
    activeDeadlineSeconds: 21600
    resources: {}
    rollingParams:
      intervalSeconds: 1
      maxSurge: 25%
      maxUnavailable: 25%
      timeoutSeconds: 600
      updatePeriodSeconds: 1
    type: Rolling
  template:
    metadata:
      creationTimestamp:
      labels:
        name: "{{ .Values.name }}"
    spec:
      containers:
      - image: "{{ .Values.image_repository }}/{{ .Values.image_namespace }}/{{ .Values.name }}:{{ .Values.app_tag }}"
        imagePullPolicy: Always
        name: "{{ .Values.name }}"
        ports:
        - containerPort: 8080
          protocol: TCP
        resources: {}
        terminationMessagePath: "/dev/termination-log"
        volumeMounts:
          - mountPath: "/opt/app-root/src/env"
            name: app-config
        readinessProbe:
          httpGet:
            path: /
            port: 8080
          initialDelaySeconds: 10
          timeoutSeconds: 1
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
      - configMap:
          defaultMode: 420
          items:
            - key: env
              path: env.js
          name: environment
        name: app-config
  test: false
  triggers: []